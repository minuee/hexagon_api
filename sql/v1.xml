<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="V1">

<!--SELECT-->
<!--등급 확인-->
<select id="HAX.V1.SELECT.001">
    SELECT
        GRADE,
        RESERVE_PER
    FROM
        TB_USER
    WHERE
        member_pk = #{member_pk}
</select>
<!--적립금 목록-->
<select id="HAX.V1.SELECT.002">
    SELECT
        A.TOTAL_REWARD,
        B.REG_DT,
        B.RESRVE_CONTENT,
        B.REWARD,
        C.CODE_DESC
    FROM
        TB_USER A
        LEFT OUTER JOIN TB_RESERVE B
        ON A.member_pk = B.member_pk
        INNER JOIN TB_CODE C
        ON B.REWARD_TYPE = C.CODE_ID
    WHERE
        A.member_pk = #{member_pk}	
    page
        ${page}
    paginate
        ${paginate}
</select>
<!--공지사항 목록 조회-->
<select id="HAX.V1.SELECT.003">
    SELECT
        NOTICE_NO,
        TITLE,
        START_DT
    FROM
        TB_NOTICE
    WHERE
        USE_YN = TRUE
    page
        ${page}
    paginate
        ${paginate}
</select>
<!--공지사항 상세정보 조회-->
<select id="HAX.V1.SELECT.004">
	SELECT
		A.TITLE,
		A.NOTICE_CONTENT,
		A.START_DT,
		B.IMG_NO,
		B.IMG_URL
	FROM
		TB_NOTICE A
		LEFT OUTER JOIN TB_IMG B
		ON A.IMG_NO = B.IMG_NO
		AND B.TYPE_CODE = 'NOTICE'
	WHERE
        A.USE_YN = TRUE
		AND A.NOTICE_NO = #{notice_no}
</select>
<!--마이 페이지 기본 정보-->
<select id="HAX.V1.SELECT.005">
    SELECT
        member_pk,
        COMPANY_NAME,
        USER_NAME,
        GRADE,
        RESERVE_PER,
        TOTAL_REWARD
    FROM
        TB_USER
    WHERE
        member_pk = #{member_pk}
</select>
<!--주문내역 목록 조회-->
<select id="HAX.V1.SELECT.006">
    SELECT
    	B.PRODUCT,
        A.ORDER_NO,
    	A.ORDER_PK,
    	A.REG_DT,
    	A.TOTAL_AMOUNT,
    	CASE WHEN A.ORDER_STATUS = 'WAIT' THEN '입금대기' WHEN A.ORDER_STATUS = 'OVERTIME' THEN '입금기한초과' WHEN A.ORDER_STATUS = 'INCOME' THEN '입금완료' WHEN A.ORDER_STATUS = 'TRANSING' THEN '출고완료' WHEN A.ORDER_STATUS = 'CANCEL_A' THEN '결제취소' WHEN A.ORDER_STATUS = 'CANCEL_B' THEN '주문취소' ELSE '교환요청' END AS ORDER_STATUS_NAME,
        COUNT(1) OVER() AS TOTAL
    FROM
        TB_ORDER A
        LEFT OUTER JOIN (
        	SELECT
        		ORDER_PK,
        		ARRAY_AGG(JSON_BUILD_OBJECT(
        			'product_name', PRODUCT_INFO->>'product_name')) AS PRODUCT
        	FROM
        		TB_ORDERPRODUCT
        	GROUP BY
        		ORDER_PK) B
        ON A.ORDER_PK = B.ORDER_PK
    WHERE
    	MEMBER_PK = #{member_pk}
    ORDER BY
        A.REG_DT DESC
	OFFSET
		${page}
	LIMIT
		${paginate}
</select>
<!--회사 목록 조회-->
<select id="HAX.V1.SELECT.007">
    SELECT
        A.CATEGORY_PK,
        A.COMPANY_NAME,
        B.IMG_URL
    FROM
        TB_CATEGORY A 
        INNER JOIN TB_IMG B
        ON A.IMG_NO = B.IMG_NO
    WHERE
        A.USE_YN = TRUE
    page
        ${page}
    paginate
        ${paginate}
</select>
<!--상품 목록 조회-->
<select id="HAX.V1.SELECT.008">
    SELECT
        A.PRODUCT_PK,
        A.PRODUCT_NAME,
        A.ONE_COST,
        B.IMG_URL
    FROM
        TB_PRODUCT A
        INNER JOIN TB_IMG B
        ON A.MAIN_IMG_NO = B.IMG_NO
        AND B.TYPE_CODE = 'PRODUCT_MAIN'
    WHERE
        A.USE_YN = TRUE
        <if test="CATEGORY_PK != null">
        AND A.CATEGORY_PK = #{CATEGORY_PK}
        </if>
    page
        ${page}
    paginate
        ${paginate}
</select>
<!--상품 상세정보 조회-->
<select id="HAX.V1.SELECT.009">
    SELECT
        A.PRODUCT_NAME,
        A.ONE_COST,
        A.BOX_COST,
        A.BOX_QUANTITY,
        A.CARTON_COST,
        A.CARTON_QUANTITY,
        A.MATERIAL,
        B.COMPANY_NAME,
        C.IMG_NO,
        C.IMG_URL
    FROM
        TB_PRODUCT A
        INNER JOIN TB_CATEGORY B
        ON A.CATEGORY_PK = B.CATEGORY_PK
        INNER JOIN TB_IMG C
        ON A.MAIN_IMG_NO = C.IMG_NO
        AND C.TYPE_CODE = 'PRODUCT_MAIN'
    WHERE
        USE_YN = TRUE
        AND PRODUCT_PK = #{PRODUCT_PK}
</select>
<!--장바구니 상품리스트-->
<select id="HAX.V1.SELECT.010">
    SELECT
        b.product_pk,
        b.product_name,
        b.thumb_img,
        b.each_price,
        b.box_price,
        b.carton_price,
        b.event_each_price,
        b.event_box_price,
        b.event_carton_price,
        b.event_each_stock,
        b.event_box_stock,
        b.event_carton_stock,
        b.is_soldout,
        b.can_point,
        b.is_nonpoint,
        a.child
    FROM
        (
           SELECT
                a.product_pk,
               	array_agg(json_build_object(
                    'cart_pk', a.cart_pk,
                    'product_pk', a.product_pk,
                    'unit_type', a.unit_type,
                    'quantity', a.quantity
                ) ORDER BY 
                    CASE WHEN a.unit_type = 'Each' THEN 1 WHEN a.unit_type = 'Box' THEN 2 ELSE 3 END ASC
            	) AS child
            FROM
                tb_cart AS a
                INNER JOIN tb_product AS c ON a.product_pk = c.product_pk AND c.use_yn = TRUE
               	LEFT OUTER JOIN ( 
	               	SELECT ep.product_pk 
	               	FROM  tb_event as e INNER JOIN tb_eventproduct AS ep ON e.event_pk = ep.event_pk 
	               	WHERE e.event_gubun = 'LIMIT' AND e.end_dt IS NULL AND e.use_yn = TRUE
	               	group by ep.product_pk 
               	) as e on c.product_pk  = e.product_pk
            WHERE 
                a.member_pk = #{member_pk}
                and ( 
                	e.product_pk IS NULL OR 
                	( a.unit_type = 'Each' AND c.event_each_stock > 0 ) OR ( a.unit_type = 'Box' AND c.event_box_stock > 0 ) OR ( a.unit_type = 'Carton' AND c.event_carton_stock > 0 )
                )
            GROUP BY a.product_pk
        ) AS a 
    INNER JOIN tb_product AS b 
    ON a.product_pk = b.product_pk 
    WHERE
        b.use_yn = TRUE
</select>
<!--사업자 등록번호 중복체크-->
<select id="HAX.V1.SELECT.011">
    SELECT
        COMPANY_REGIST
    FROM
        TB_USER
    WHERE
        COMPANY_REGIST = #{company_regist}
</select>
<!--코드 뱅크-->
<select id="HAX.V1.SELECT.012">
    SELECT
        BANKIDX,
        BANKNAME,
        BANKCODE,
        BANKCODE2,
        BANKCODE3,
        BANKCODE4,
        BANKCODE5,
        REG_DT,
        REGDATETIME
    FROM
        TB_CODEBANK
    WHERE
        ISUSE = TRUE
    ORDER BY
        BANKIDX ASC
</select>
<!--공통 코드-->
<select id="HAX.V1.SELECT.013">
    SELECT
        CODE_GROUP,
        GROUP_NAME,
        CODE,
        CODE_NAME
    FROM
        TB_CODE
    WHERE
        USE_YN = TRUE
    ORDER BY
        CODE_GROUP,CODE_PK,UP_DT ASC
</select>
<!--로그인 필요 값-->
<select id="HAX.V1.SELECT.014">
    SELECT
        USER_ID
    FROM
        TB_MEMBER
    WHERE
        USER_ID = lower(#{user_id})
</select>
<!--6자리 코드 현황 조회-->
<select id="HAX.V1.SELECT.015">
    SELECT
        special_code
    FROM
        TB_MEMBER
</select>
<!--로그인 체크-->
<select id="HAX.V1.SELECT.016">
    SELECT
        A.USER_ID,
        A.MEMBER_PK,
        A.NAME,
        A.EMAIL,
        A.PHONE,
        A.IS_SALESMAN,
        B.CODE AS GRADE_CODE,
        B.NAME AS GRADE_NAME,
        B.RATE AS GRADE_RATE,
        A.SPECIAL_CODE
    FROM
        TB_MEMBER A
        INNER JOIN TB_GRADE B
        ON A.GRADE_CODE = B.CODE
    WHERE
        A.USER_ID = lower(#{user_id})
        AND A.USE_YN = TRUE
        AND A.PASSWORD = encode(encrypt(convert_to(#{password},'utf8'),#{enc_key},'aes'),'hex');
</select>
<!--가입시 추천인 코드 체크-->
<select id="HAX.V1.SELECT.017">
    SELECT
        MEMBER_PK
    FROM
        TB_MEMBER
    WHERE
        USE_YN = TRUE
        AND SPECIAL_CODE = #{recomm_code}
</select>
<!--잔액 체크-->
<select id="HAX.V1.SELECT.018">
    SELECT
        REMAIN_POINT
    FROM
        TB_RESERVE
    WHERE
        MEMBER_PK = #{member_pk}
    ORDER BY
        REG_DT
</select>
<!--회원가입시 영업사원 존재체크-->
<select id="HAX.V1.SELECT.019">
    SELECT
        MEMBER_PK
    FROM
        TB_MEMBER
    WHERE
        USE_YN = TRUE
        AND SPECIAL_CODE = #{agent_code}
</select>
<!--회원가입시 유니크 코드 중복체크-->
<select id="HAX.V1.SELECT.020">
    SELECT
        MEMBER_PK
    FROM
        TB_MEMBER
    WHERE
        SPECIAL_CODE = #{special_code}
</select>
<!--로그인시 사용여부 체크-->
<select id="HAX.V1.SELECT.021">
    SELECT
        USER_ID, PHONE, MEMBER_PK
    FROM
        TB_MEMBER
    WHERE
        USE_YN = TRUE
        AND USER_ID = lower(#{user_id})
</select>
<!--장바구니 삽입 후 리스트-->
<select id="HAX.V1.SELECT.022">
    SELECT
        B.PRODUCT_PK,
        B.PRODUCT_NAME,
        B.THUMB_IMG,
        B.EACH_PRICE,
        B.BOX_PRICE,
        B.CARTON_PRICE,
        B.EVENT_EACH_PRICE,
        B.EVENT_BOX_PRICE,
        B.EVENT_CARTON_PRICE,
        B.EVENT_EACH_STOCK,
        B.EVENT_BOX_STOCK,
        B.EVENT_CARTON_STOCK,
        B.IS_SOLDOUT,
        B.CAN_POINT,
        B.IS_NONPOINT,
        A.CHILD
    FROM
        (
            SELECT
                A.PRODUCT_PK,
                ARRAY_AGG(JSON_BUILD_OBJECT(
                    'cart_pk', A.CART_PK,
                    'product_pk', A.PRODUCT_PK,
                    'unit_type', A.UNIT_TYPE,
                    'quantity', A.QUANTITY
                ) ORDER BY 
                    CASE WHEN A.UNIT_TYPE = 'Each' THEN 1 WHEN A.UNIT_TYPE = 'Box' THEN 2 ELSE 3 END ASC
            ) AS CHILD
            FROM
                TB_CART AS A
                INNER JOIN TB_PRODUCT AS C 
                ON A.PRODUCT_PK = C.PRODUCT_PK AND C.USE_YN = TRUE
            WHERE 
                A.CART_PK IN (${insert_array})
            GROUP BY 
                A.PRODUCT_PK
        ) AS A 
    INNER JOIN TB_PRODUCT AS B 
    ON A.PRODUCT_PK = B.PRODUCT_PK 
    WHERE
        B.USE_YN = TRUE
</select>
<!--주문 필요 정보-->
<select id="HAX.V1.SELECT.023">
    SELECT
        A.MEMBER_PK,
        A.NAME,
        A.PHONE,
        A.SPECIAL_CODE,
        A.AGENT_CODE,
        B.COUPON,
        C.DELIVERY,
        COALESCE(D.REMAIN_POINT,0) AS REMAIN_POINT
    FROM
        TB_MEMBER A
        LEFT OUTER JOIN (
            SELECT
                MEMBER_PK,
                ARRAY_AGG(JSON_BUILD_OBJECT(
                    'coupon_pk', COUPON_PK,
                    'price', PRICE,
                    'member_pk', MEMBER_PK,
                    'reg_dt', REG_DT,
                    'end_dt', END_DT,
                    'issue_reason', ISSUE_REASON,
                    'update_reason', UPDATE_REASON
                    )) AS COUPON
            FROM
                TB_COUPON
            WHERE
                USE_YN = TRUE
                AND END_DT &gt; #{today}
            GROUP BY
                MEMBER_PK
                ) B
        ON A.MEMBER_PK = B.MEMBER_PK
        LEFT OUTER JOIN (
            SELECT
                MEMBER_PK,
                ARRAY_AGG(JSON_BUILD_OBJECT(
                'memberdelivery_pk', MEMBERDELIVERY_PK,
                'zipcode', ZIPCODE,
                'address', ADDRESS,
                'address_detail', ADDRESS_DETAIL,
                'member_pk', MEMBER_PK,
                'is_main', IS_MAIN
                )
                ORDER BY 
                    CASE WHEN IS_MAIN = TRUE THEN 1 ELSE 2 END ASC
                ) AS DELIVERY
            FROM
                TB_MEMBERDELIVERY
            WHERE
                USE_YN = TRUE
            GROUP BY
                MEMBER_PK) C
        ON A.MEMBER_PK = C.MEMBER_PK
        LEFT OUTER JOIN (
            SELECT
                MEMBER_PK,
                SUM(REMAIN_POINT) AS REMAIN_POINT
            FROM
                TB_RESERVE
            WHERE
                USE_ENDDATE &gt; #{today}
            GROUP BY
                MEMBER_PK) D
        ON A.MEMBER_PK = D.MEMBER_PK
    WHERE
        A.MEMBER_PK = #{member_pk}
</select>
<!--배송지 신규 등록 후-->
<select id="HAX.V1.SELECT.024">
    SELECT
        MEMBER_PK,
        ARRAY_AGG(JSON_BUILD_OBJECT(
                'memberdelivery_pk', MEMBERDELIVERY_PK,
                'zipcode', ZIPCODE,
                'address', ADDRESS,
                'address_detail', ADDRESS_DETAIL,
                'member_pk', MEMBER_PK,
                'is_main', IS_MAIN
                )
                ORDER BY 
                    CASE WHEN IS_MAIN = TRUE THEN 1 ELSE 2 END ASC
                ) AS DELIVERY
    FROM
        TB_MEMBERDELIVERY
    WHERE
        USE_YN = TRUE
        AND MEMBERDELIVERY_PK = #{memberdelivery_pk}
    GROUP BY
        MEMBER_PK
</select>
<!--장바구니 업데이트 후 총 수-->
<select id="HAX.V1.SELECT.025">
    SELECT
        COUNT(1) OVER() AS TOTAL
    FROM
        TB_CART as a 
        INNER JOIN tb_product AS c ON a.product_pk = c.product_pk AND c.use_yn = true
       	left join ( 
           	select ep.product_pk 
           	from  tb_event as e inner join tb_eventproduct as ep on e.event_pk = ep.event_pk 
           	where e.event_gubun = 'LIMIT' and e.end_dt is null and e.use_yn = true
           	group by ep.product_pk 
       	) as e on c.product_pk  = e.product_pk
    WHERE
        MEMBER_PK = #{member_pk}
        and ( e.product_pk is null or 
                	( a.unit_type = 'Each' and c.event_each_stock > 0 ) or ( a.unit_type = 'Box' and c.event_box_stock > 0 ) or ( a.unit_type = 'Carton' and c.event_carton_stock > 0 )
                )
    GROUP BY
        a.PRODUCT_PK
</select>
<!--결제 포인트 체크-->
<select id="HAX.V1.SELECT.026">
    SELECT
        CASE WHEN (SUM(REMAIN_POINT) &gt;= #{point}) THEN TRUE ELSE FALSE END AS POINT_CHECK
    FROM
        TB_RESERVE
    WHERE
        MEMBER_PK = #{member_pk}
        AND USE_ENDDATE &gt; #{today}
        and reward_gubun = 'p'
</select>
<!--결제 쿠폰 사용 체크-->
<select id="HAX.V1.SELECT.027">
    SELECT
        COUPON_PK
    FROM
        TB_COUPON
    WHERE
        USE_YN = TRUE
        AND MEMBER_PK = #{member_pk}
        AND END_DT &gt; #{today}
        AND COUPON_PK = #{coupon_pk}
</select>
<!--결제 포인트-->
<select id="HAX.V1.SELECT.028">
    WITH tmp AS (
        SELECT 
            sum(remain_point) OVER (ORDER BY use_enddate rows between current row and unbounded following) as forward_sum,
            reserve_pk,reward_point ,remain_point ,use_enddate
        FROM 
            tb_reserve
        WHERE 
            member_pk = ${memberIdx} 
            AND use_enddate &gt; ${today} 
            AND reward_gubun = 'p' 
            AND remain_point &gt; 0
        ORDER BY 
            use_enddate
    )
    SELECT
        max(t1.reserve_pk) AS reserve_pk,
        t1.remain_point,
        case WHEN sum(t2.remain_point)-${today} &gt; 0 THEN t1.remain_point ELSE t1.remain_point-(sum(t2.remain_point)-${today}) END AS use_point
    FROM 
        tmp AS t1
    	LEFT OUTER JOIN tmp AS t2 
    	ON t2.reserve_pk &gt;= t1.reserve_pk 
    GROUP BY 
    	t1.use_enddate,t1.remain_point
    HAVING 
    	t1.remain_point - sum(t2.remain_point) &gt; ${today}*(-1)
    ORDER BY
    	t1.use_enddate
</select>
<!--주문 상세정보 상품-->
<select id="HAX.V1.SELECT.029">
    SELECT
        B.*
    FROM
        TB_ORDER A
        LEFT OUTER JOIN (
                SELECT
                    ORDER_PK,
                    ARRAY_AGG(JSON_BUILD_OBJECT(
                        'product_pk', PRODUCT_PK,
                        'product_name', PRODUCT_INFO->>'product_name',
                        'total_price', TOTAL_PRICE,
                        'discount_price', DISCOUNT_PRICE,
                        'event_each_stock', EVENT_EACH_STOCK,
                        'event_box_stock', EVENT_BOX_STOCK,
                        'event_carton_stock', EVENT_CARTON_STOCK,
                        'event_limit_price', EVENT_LIMIT_PRICE,
                        'product_info', PRODUCT_INFO)
                        ) AS PRODUCT
                FROM
                    TB_ORDERPRODUCT
                GROUP BY
                    ORDER_PK) B
            ON A.ORDER_PK = B.ORDER_PK
    WHERE
        A.ORDER_PK = #{order_pk}
</select>
<!--주문 상세정보 주문-->
<select id="HAX.V1.SELECT.030">
    SELECT
        B.NAME,
        B.PHONE,
        B.EMAIL,
        A.MEMBER_PK,
        A.ORDER_PK,
        A.MEMBER_INFO,
        A.ORDER_NO,
        A.REFUND_TYPE,
        A.REFUND_BANKCODE,
        A.REFUND_BANKNAME,
        A.REFUND_BANKACCOUNT,
        A.INCOME_DT,
        A.INCOME_LIMIT_DT,
        A.DELIVERY_ADDRESS,
        A.DELIVERY_RECEIVER,
        A.DELIVERY_PHONE,
        A.DELIVERY_MEMO,
        A.PRODUCT_AMOUNT,
        A.DISCOUNT_AMOUNT,
        A.COUPON_AMOUNT,
        A.POINT_AMOUNT,
        A.DELIVERY_AMOUNT,
        A.TOTAL_AMOUNT,
        A.SETTLE_TYPE,
        A.ORDER_STATUS,
        C.CODE_NAME AS SETTLE_TYPE_NAME,
        D.CODE_NAME AS ORDER_STATUS_NAME
    FROM
        TB_ORDER A
        INNER JOIN TB_MEMBER B
        ON A.MEMBER_PK = B.MEMBER_PK
        LEFT OUTER JOIN TB_CODE C
        ON A.SETTLE_TYPE = C.CODE
        LEFT OUTER JOIN TB_CODE D
        ON A.ORDER_STATUS = D.CODE
    WHERE
        A.ORDER_PK = #{order_pk}
</select>
<!--주문 상세정보 상세-->
<select id="HAX.V1.SELECT.031">
    SELECT
        B.APPLY_NUM,
        B.BANK_CODE,
        B.BANK_NAME,
        B.BUYER_ADDR,
        B.BUYER_EMAIL,
        B.BUYER_TEL,
        B.CANCEL_AMOUNT,
        B.CANCEL_REASON,
        B.CARD_CODE,
        B.CARD_NAME,
        B.CARD_NUMBER,
        B.CARD_QUOTA,
        B.CARD_RECEIPT_ISSUED,
        B.CARD_TYPE,
        B.CURRENCY,
        B.CUSTOM_DATA,
        B.CUSTOM_UID,
        B.ESCROW,
        B.FAIL_REASON,
        B.IMP_UID,
        B.MERCHANT_UID,
        B.PAY_METHOD,
        B.PG_ID,
        B.PG_PROVIDER,
        B.PG_TID,
        B.RECEIPT_URL,
        B.STATUS,
        B.STARTED_AT,
        B.USER_AGENT,
        B.VBANK_CODE,
        B.VBANK_DATE,
        B.VBANK_HOLDER,
        B.VBANK_ISSUED_AT,
        B.VBANK_NAME,
        B.VBANK_NUM
    FROM
        TB_ORDER A
        LEFT OUTER JOIN TB_ORDERDETAIL B
        ON A.ORDER_PK = B.ORDER_PK
    WHERE
        A.ORDER_PK = #{order_pk}
</select>
<!--주문번호 유효확인-->
<select id="HAX.V1.SELECT.032">
    SELECT
        ORDER_PK
    FROM
        TB_ORDER
    WHERE
        ORDER_NO = #{merchant_uid}
</select>
<!--메인 목록-->
<select id="HAX.V1.SELECT.033">
    select t.*
    from
    (select * from fn_main_data(${member_pk},${today})) as t
</select>
<!--회원 적립금 목록-->
<select id="HAX.V1.SELECT.034">
    SELECT
        A.RESERVE_PK,
        A.CONTENT,
        A.REWARD_TYPE,
        B.CODE_NAME AS REWRARD_TYPE_NAME,
        A.REG_DT,
        C.POINT_HISTORY,
        COUNT(1) OVER() AS TOTAL
    FROM
        TB_RESERVE A
        INNER JOIN TB_CODE B
        ON A.REWARD_TYPE = B.CODE
        LEFT OUTER JOIN (
            SELECT
                RESERVE_PK,
                ARRAY_AGG(JSON_BUILD_OBJECT(
                    'pointlog_pk', POINTLOG_PK,
                    'reward_point', REWARD_POINT,
                    'point_gubun', CASE WHEN REWARD_GUBUN = 'p' THEN '+' ELSE '-' END,
                    'poing_reg_dt',REG_DT)) AS POINT_HISTORY
            FROM
                TB_POINTLOG
            GROUP BY
                RESERVE_PK) C
        ON A.RESERVE_PK = C.RESERVE_PK
    WHERE
        A.MEMBER_PK = #{member_pk}
    ORDER BY
        A.REG_DT DESC
    OFFSET
		${page}
	LIMIT
		${paginate}
</select>
<!--회원 적립금 상세-->
<select id="HAX.V1.SELECT.035">
    SELECT
        C.POINT_HISTORY
    FROM
        TB_RESERVE A
        LEFT OUTER JOIN (
            SELECT
                RESERVE_PK,
                ARRAY_AGG(JSON_BUILD_OBJECT(
                    'pointlog_pk', POINTLOG_PK,
                    'reward_point', REWARD_POINT,
                    'point_gubun', CASE WHEN REWARD_GUBUN = 'p' THEN '+' ELSE '-' END,
                    'poing_reg_dt',REG_DT)) AS POINT_HISTORY
            FROM
                TB_POINTLOG
            GROUP BY
                RESERVE_PK) C
        ON A.RESERVE_PK = C.RESERVE_PK
    WHERE
        A.RESERVE_PK = #{reserve_pk}
        AND A.MEMBER_PK = #{member_pk}
</select>
<!--메인 신제품 목록-->
<select id="HAX.V1.SELECT.036">
   SELECT
        A.PRODUCT_PK,
        A.PRODUCT_NAME,
        A.THUMB_IMG,
        A.EACH_PRICE,
        A.EVENT_EACH_PRICE,
        CASE WHEN B.CATEGORY_NAME IS NOT NULL THEN B.CATEGORY_NAME WHEN B.CATEGORY_NAME IS NULL THEN E.NORMALCATEGORY_NAME END AS CATEGORY_NAME,
        COUNT(1) OVER() AS TOTAL
    FROM
        TB_PRODUCT A
        LEFT OUTER JOIN TB_CATEGORY B
        ON A.CATEGORY_PK = B.CATEGORY_PK AND CATEGORY_TYPE = 'B'
        LEFT OUTER JOIN (
          SELECT
            C.CATEGORY_PK,
            D.NAME AS NORMALCATEGORY_NAME
          FROM
            TB_CATEGORY C
            INNER JOIN TB_NORMALCATEGORY D
            ON C.NORMALCATEGORY_PK = D.NORMALCATEGORY_PK
          WHERE
          	C.CATEGORY_TYPE = 'N') E
        ON A.CATEGORY_PK = E.CATEGORY_PK
    WHERE
        A.USE_YN = TRUE
    ORDER BY
        <choose>
			<when test="sortItem == 'low'">
            A.EACH_PRICE ASC
            </when>
		    <when test="sortItem == 'high'">
            A.EACH_PRICE DESC
            </when>
            <otherwise>
            A.REG_DT DESC
            </otherwise>
		</choose>
    OFFSET
		${page}
	LIMIT
		${paginate}
</select>
<!--메인 베스트 목록-->
<select id="HAX.V1.SELECT.037">
    SELECT
        A.PRODUCT_PK,
        MAX(B.PRODUCT_NAME) AS PRODUCT_NAME,
        MAX(B.THUMB_IMG) AS THUMB_IMG,
        COALESCE(MAX(B.EACH_PRICE),0) AS EACH_PRICE,
        COALESCE(MAX(B.EVENT_EACH_PRICE),0) AS EVENT_EACH_PRICE,
        COALESCE(SUM(A.EACH_SOLD),0) AS SUM_EACH_SOLD,
        CASE WHEN E.CATEGORY_NAME IS NOT NULL THEN E.CATEGORY_NAME WHEN E.CATEGORY_NAME IS NULL THEN H.NORMALCATEGORY_NAME END AS CATEGORY_NAME,
        COUNT(1) OVER() AS TOTAL
    FROM
        TB_PRODUCT AS B
        LEFT OUTER JOIN TB_CATEGORY E
        ON B.CATEGORY_PK = E.CATEGORY_PK AND E.CATEGORY_TYPE = 'B'
        LEFT OUTER JOIN (
        	SELECT
        		F.CATEGORY_PK,
        		G.NAME AS NORMALCATEGORY_NAME
        	FROM
        		TB_CATEGORY F
        		INNER JOIN TB_NORMALCATEGORY G
        		ON F.NORMALCATEGORY_PK = G.NORMALCATEGORY_PK) H
        ON B.CATEGORY_PK = H.CATEGORY_PK
        LEFT OUTER JOIN TB_ORDERPRODUCT AS A
        ON A.PRODUCT_PK = B.PRODUCT_PK 
        LEFT OUTER JOIN TB_ORDER AS C
        ON A.ORDER_PK = C.ORDER_PK
        LEFT OUTER JOIN (
        	SELECT
				PRODUCT_PK,COUNT(1) AS GOOD
			FROM
				TB_ORDERPRODUCT
			GROUP BY
				PRODUCT_PK
        ) D
        ON A.PRODUCT_PK = D.PRODUCT_PK
    WHERE 
        B.USE_YN = TRUE
        AND C.ORDER_STATUS NOT IN ('CANCEL_B','CANCEL_A')
    GROUP BY
        A.PRODUCT_PK, E.CATEGORY_NAME, H.NORMALCATEGORY_NAME
    ORDER BY
        <choose>
			<when test="sortItem == 'new'">
            MAX(B.REG_DT) DESC
            </when>
		    <when test="sortItem == 'low'">
            MAX(B.EACH_PRICE) ASC
            </when>
            <when test="sortItem == 'high'">
            MAX(B.EACH_PRICE) DESC
            </when>
            <otherwise>
            MAX(D.GOOD) DESC
            </otherwise>
		</choose>
    OFFSET
		${page}
	LIMIT
		${paginate}
</select>
<!--주문 관련 로그-->
<select id="HAX.V1.SELECT.038">
    SELECT
    	A.ORDER_PK,
    	A.ORDERHISTORY,
    	B.RESERVE,
    	C.POINTLOG
    FROM
        (
        	SELECT
        		ORDER_PK,
        		ARRAY_AGG(JSON_BUILD_OBJECT(
        			'orderhistory_pk',ORDERHISTORY_PK,
        			'comment',COMMENT,
        			'reg_dt',REG_DT,
        			'history_type',HISTORY_TYPE
        		)ORDER BY reg_dt asc, case when history_type = 'ORDER' then 1 else 2 end) AS ORDERHISTORY
        	FROM
        		TB_ORDERHISTORY
        	WHERE
        		ORDER_PK = #{order_pk}
        	GROUP BY
        		ORDER_PK
        	) AS A
        LEFT OUTER JOIN
        (
        	SELECT
        		ORDER_PK,
        		ARRAY_AGG(JSON_BUILD_OBJECT(
        			'reserve_pk',RESERVE_PK,
        			'content',CONTENT,
        			'reward_point',REWARD_POINT,
        			'reward_type',REWARD_TYPE,
        			'reg_dt',REG_DT,
        			'reward_rate',REWARD_RATE,
        			'use_enddate',USE_ENDDATE,
        			'remain_point',REMAIN_POINT)ORDER BY REG_DT DESC) AS RESERVE
        	FROM
        		TB_RESERVE
        	WHERE
        		ORDER_PK = #{order_pk}
        	GROUP BY
        		ORDER_PK
        	) AS B
        ON A.ORDER_PK = B.ORDER_PK
        LEFT OUTER JOIN
        (
        	SELECT
        		ORDER_PK,
        		ARRAY_AGG(JSON_BUILD_OBJECT(
        			'pointlog_pk',POINTLOG_PK,
        			'reward_point',REWARD_POINT,
        			'reg_dt',REG_DT,
        			'order_pk',ORDER_PK)ORDER BY REG_DT DESC) AS POINTLOG
        	FROM
        		TB_POINTLOG
        	WHERE
        		ORDER_PK = #{order_pk}
        	GROUP BY
        		ORDER_PK
        	) AS C
        ON A.ORDER_PK = C.ORDER_PK
    WHERE
    	A.ORDER_PK = #{order_pk}
</select>
<!--맴버PK로 체크-->
<select id="HAX.V1.SELECT.039">
    SELECT
        USER_ID
    FROM
        TB_MEMBER
    WHERE
        MEMBER_PK = #{member_pk}
</select>
<!--내정보,등급정보-->
<select id="HAX.V1.SELECT.040">
    SELECT
        b.*,
        a.grade_start AS now_grade_start,
        a.grade_end AS now_grade_end,
        COALESCE(e.coupon_count,0) as coupon_count
    FROM
        tb_member AS a
        LEFT OUTER JOIN tb_grade_log AS b
        ON a.member_pk = b.member_pk
        AND a.grade_start = b.grade_start 
        AND a.grade_end = b.grade_end
        LEFT OUTER JOIN (
                            SELECT
                                c.member_pk,
                                count(1) AS coupon_count 
                            FROM
                                tb_member AS c
                                LEFT OUTER JOIN tb_coupon AS d
                                ON c.member_pk = d.member_pk
                            WHERE
                                d.use_yn = TRUE
                            GROUP BY
                                c.member_pk) AS e
        ON a.member_pk = e.member_pk
    WHERE
        a.member_pk = #{member_pk}
</select>
<!--UPDATE-->
<!--장바구니 수량 수정-->
<update id="HAX.V1.UPDATE.001">
    UPDATE
        TB_CART
    SET
        QUANTITY = #{quantity}
    WHERE
        CART_PK = #{cart_pk}
</update>
<!--장바구니 삭제-->
<update id="HAX.V1.UPDATE.002">
    UPDATE
        TB_BASKET
    SET
        USE_YN = FALSE
    WHERE
        BASKET_NO = #{basket_no}    
</update>
<!--회원 핸드폰 번호 변경-->
<update id="HAX.V1.UPDATE.003">
	UPDATE
		TB_MEMBER
	SET
		PHONE = #{phone}
	WHERE
        MEMBER_PK = #{member_pk}
</update>
<!--회원 비밀번호 재설정-->
<update id="HAX.V1.UPDATE.004">
	UPDATE
		TB_MEMBER
	SET
		PASSWORD = encode(encrypt(convert_to(#{password},'utf8'),#{enc_key},'aes'),'hex')
	WHERE
        MEMBER_PK = #{member_pk}
</update>
<!--결제시 배송지 업데이트-->
<update id="HAX.V1.UPDATE.005">
    WITH TMP AS (
        UPDATE
            TB_MEMBERDELIVERY
        SET
            IS_MAIN = FALSE
        WHERE
            MEMBER_PK = #{memberIdx}
    )
    UPDATE
        TB_MEMBERDELIVERY
    SET
        IS_MAIN = TRUE
    WHERE
        MEMBER_PK = #{memberIdx}
        AND MEMBERDELIVERY_PK = #{orderBase.delivery_address_pk}
</update>
<!--결제시 쿠폰 사용처리-->
<update id="HAX.V1.UPDATE.006">
    UPDATE
        TB_COUPON
    SET
        USE_DT = floor(date_part('epoch'::text, now()))::bigint,
        USE_YN = FALSE,
        ORDER_PK = #{order_pk}
    WHERE
        COUPON_PK = #{useCoupon.coupon_pk}
        AND MEMBER_PK = #{useCoupon.member_pk}
</update>
<!--결제시 포인트 사용-->
<update id="HAX.V1.UPDATE.007">
    WITH TEMP AS (
        INSERT INTO
            TB_POINTLOG
                (
                    RESERVE_PK,
                    REWARD_POINT,
                    ORDER_PK,
                    REWARD_GUBUN
                )
        VALUES
            (
                #{reserve_pk},
                #{use_point},
                #{order_pk},
                #{reward_gubun}
            )
        )
    UPDATE
        TB_RESERVE
    SET
        REMAIN_POINT = #{remain_point}
    WHERE
        MEMBER_PK = #{memberIdx}
        AND RESERVE_PK = #{reserve_pk}
</update>
<!--주문 취소-->
<update id="HAX.V1.UPDATE.008">
    WITH TMP AS (
        UPDATE
            TB_ORDER
        SET
            ORDER_STATUS = 'CANCEL_A'
        WHERE
            ORDER_PK = #{order_pk}
        )
    INSERT INTO
        TB_ORDERHISTORY
            (
                ORDER_PK,
                COMMENT,
                HISTORY_TYPE
            )
    VALUES
        (
            #{order_pk},
            #{comment},
            #{history_type}
        )
</update>
<!--입금 처리-->
<update id="HAX.V1.UPDATE.009">
    UPDATE
        TB_ORDER
    SET
        ORDER_STATUS = 'INCOME'
    WHERE
        ORDER_NO = #{merchant_uid}
        AND ORDER_STATUS = 'WAIT'
    RETURNING
        ORDER_PK
</update>
<!--한정판매 재고-->
<update id="HAX.V1.UPDATE.010">
    <foreach collection="orderProduct" item="items" separator=";">
    UPDATE
        TB_PRODUCT
    SET
        EVENT_EACH_STOCK = CASE WHEN #{items.eachEventStock} &gt; 0 AND EVENT_EACH_STOCK &gt;= #{items.eachEventStock} 
        THEN EVENT_EACH_STOCK - #{items.eachEventStock} 
        WHEN #{items.eachEventStock} &gt; 0 AND EVENT_EACH_STOCK &lt; #{items.eachEventStock} 
        THEN 0 ELSE EVENT_EACH_STOCK END ,
        EVENT_BOX_STOCK = CASE WHEN #{items.boxEventStock} &gt; 0 and EVENT_BOX_STOCK &gt;= #{items.boxEventStock} 
        THEN EVENT_BOX_STOCK - #{items.boxEventStock} 
        WHEN #{items.boxEventStock} &gt; 0 and EVENT_BOX_STOCK &lt; #{items.boxEventStock} 
        THEN 0 ELSE EVENT_BOX_STOCK END ,
        EVENT_CARTON_STOCK = CASE WHEN #{items.cartonEventStock} &gt; 0 and EVENT_CARTON_STOCK &gt;= #{items.cartonEventStock} 
        THEN EVENT_CARTON_STOCK - #{items.cartonEventStock} 
        WHEN #{items.cartonEventStock} &gt; 0 AND EVENT_CARTON_STOCK &lt; #{items.cartonEventStock} 
        THEN 0 ELSE EVENT_CARTON_STOCK END
    WHERE
        PRODUCT_PK = #{items.product_pk}
    </foreach>
</update>
<!--사용자 푸쉬 여부-->
<update id="HAX.V1.UPDATE.011">
    UPDATE
        TB_MEMBER
    SET
        IS_PUSH = #{is_push}
    WHERE
        MEMBER_PK = #{member_pk}
</update>
<!--계정 탈퇴-->
<update id="HAX.V1.UPDATE.012">
    UPDATE
        TB_MEMBER
    SET
        USE_YN = FALSE,
        DEL_DT = floor(date_part('epoch'::text, now()))::bigint
    WHERE
        MEMBER_PK = #{member_pk}
</update>
<!--INSERT-->
<!--장바구니 담기(개별)-->
<insert id="HAX.V1.INSERT.001">
    INSERT INTO
	TB_CART
	(
		PRODUCT_PK,
		QUANTITY,
        UNIT_TYPE,
        MEMBER_PK
		)
    VALUES
	(
		#{product_pk},
		#{quantity},
		#{unit_type},
		#{member_pk}
		) ON
    CONFLICT (PRODUCT_PK, UNIT_TYPE, MEMBER_PK) DO
    UPDATE
    SET
        PRODUCT_PK = TB_CART.PRODUCT_PK,
        UNIT_TYPE = TB_CART.UNIT_TYPE,
        MEMBER_PK = TB_CART.MEMBER_PK,
        QUANTITY = EXCLUDED.QUANTITY
</insert>
<!--회원 가입-->
<insert id="HAX.V1.INSERT.002">
	WITH MEM AS (
        INSERT INTO
		    TB_MEMBER
            (
                user_id,
                email,
                password,
                phone,
                img_url,
                name,
                agent_code,
                special_code,
                grade_start,
                grade_end,
                device_id,
                device_model,
                os_type,
                push_token,
                recomm_code
            )
	    VALUES
            (
                #{user_id},
                #{email},
                encode(encrypt(convert_to(#{password},'utf8'),#{enc_key},'aes'),'hex'),
                #{phone},
                #{img_url},
                #{name},
                #{agent_code},
                #{special_code},
                #{grade_start},
                #{grade_end},
                #{device_id},
                #{device_model},
                #{os_type},
                #{push_token},
                #{recomm_code}
            )
        RETURNING
            MEMBER_PK
    )
    INSERT INTO
        TB_COMPANY
        (
            company_name,
            company_type,
            business_code,
            company_class,
            company_address,
            company_zipcode,
            company_ceo,
            company_phone,
            code_img,
            MEMBER_PK,
            COMPANY_EMAIL
        )
        SELECT
            #{company_name},
            #{company_type},
            #{business_code},
            #{company_class},
            #{company_address},
            #{company_zipcode},
            #{company_ceo},
            #{company_phone},
            #{img_url},
            MEMBER_PK,
            #{email}
        FROM
            MEM
        RETURNING
            MEMBER_PK
</insert>
<!--초대 적립금 지급(기록X)-->
<insert id="HAX.V1.INSERT.003">
    WITH TEMP AS(
        INSERT INTO
        TB_RESERVE
        (
            MEMBER_PK,
            CONTENT,
            REWARD_POINT,
            REWARD_TYPE,
            REWARD_GUBUN,
            USE_ENDDATE,
            REMAIN_POINT
        )
    VALUES
        (
            #{member_pk},
            #{content},
            #{reward_point},
            #{reward_type},
            #{reward_gubun},
            floor(date_part('epoch'::text, now() + INTERVAL '3 month'))::bigint,
            #{reward_point}
        )
    RETURNING
        RESERVE_PK
        )
    INSERT INTO
        TB_POINTLOG
            (
                RESERVE_PK,
                REWARD_POINT,
                ORDER_PK,
                REWARD_GUBUN,
                SPECIAL_CODE
            )
    SELECT
        RESERVE_PK,
        #{reward_point},
        0,
        #{reward_gubun},
        #{special_code}
    FROM
        TEMP
</insert>
<!--회원가입시 영업사원 이력-->
<insert id="HAX.V1.INSERT.004">
    INSERT INTO
        TB_AGENT_LOG
        (
            MEMBER_PK,
            AGENT_CODE
        )
    VALUES
        (
            #{member_pk},
            #{agent_code}
        )
</insert>
<!--장바구니 담기(배열)-->
<insert id="HAX.V1.INSERT.005">
    INSERT INTO
	TB_CART
	    (
		PRODUCT_PK,
        MEMBER_PK,
        UNIT_TYPE,
        QUANTITY
		)
    VALUES
    <foreach collection="data_array" item="items" separator=",">
	    (
		#{items.product_pk},
        #{member_pk},
        #{items.unit_type},
        #{items.quantity}
		)
    </foreach>
    RETURNING
        CART_PK
</insert>
<!--배송지 신규 등록-->
<insert id="HAX.V1.INSERT.006">
	WITH TMP AS (
        UPDATE
            TB_MEMBERDELIVERY
        SET
            IS_MAIN = FALSE
        WHERE
            MEMBER_PK = #{member_pk}
    )
    INSERT INTO
		TB_MEMBERDELIVERY
		(
			MEMBER_PK,
			ADDRESS,
            ADDRESS_DETAIL,
            ZIPCODE
		)
	VALUES
		(
			#{member_pk},
			#{address},
            #{addressDetail},
            #{zipCode}
		)
    RETURNING
        MEMBERDELIVERY_PK
</insert>
<!--결제-->
<insert id="HAX.V1.INSERT.007">
    INSERT INTO
        TB_ORDER
            (
                SETTLE_TYPE,
                ORDER_STATUS,
                PRODUCT_AMOUNT,
                DISCOUNT_AMOUNT,
                COUPON_AMOUNT,
                POINT_AMOUNT,
                DELIVERY_AMOUNT,
                INCOME_DT,
                AGENT_CODE,
                REFUND_TYPE,
                MEMBER_INFO,
                DELIVERY_ADDRESS,
                DELIVERY_RECEIVER,
                DELIVERY_PHONE,
                DELIVERY_MEMO,
                MEMBER_PK,
                REWARD_RATE,
                REWARD_POINT,
                INCOME_LIMIT_DT,
                TOTAL_AMOUNT,
                ORDER_NO,
                REFUND_BANKCODE,
                REFUND_BANKNAME,
                REFUND_BANKACCOUNT
                )
    VALUES
        (
            #{orderBase.settle_type},
            #{orderBase.order_status},
            #{orderBase.product_amount},
            #{orderBase.discount_amount},
            #{orderBase.coupon_amount},
            #{orderBase.point_amount},
            #{orderBase.delivery_amount},
            #{orderBase.income_dt},
            #{orderBase.agent_code},
            #{orderBase.refund_type},
            #{orderBase.member_info},
            #{orderBase.delivery_address},
            #{orderBase.delivery_receiver},
            #{orderBase.delivery_phone},
            #{orderBase.delivery_memo},
            #{memberIdx},
            #{orderBase.reward_rate},
            #{orderBase.reward_point},
            #{orderBase.income_limit_dt},
            #{orderBase.total_amount},
			#{orderBase.merchant_uid},
            #{orderBase.refund_bankcode},
            #{orderBase.refund_bankname},
            #{orderBase.refund_bankaccount}
            )
    RETURNING
        ORDER_PK
</insert>
<!--결제시 PG사 데이터-->
<insert id="HAX.V1.INSERT.008">
    INSERT INTO
        TB_ORDERDETAIL
            (
                AMOUNT,
                APPLY_NUM,
                BANK_CODE,
                BANK_NAME,
                BUYER_ADDR,
                BUYER_EMAIL,
                BUYER_TEL,
                CANCEL_AMOUNT,
                CANCEL_REASON,
                CARD_CODE,
                CARD_NAME,
                CARD_NUMBER,
                CARD_QUOTA,
                CARD_RECEIPT_ISSUED,
                CARD_TYPE,
                CURRENCY,
                CUSTOM_DATA,
                CUSTOM_UID,
                ESCROW,
                FAIL_REASON,
                IMP_UID,
                MERCHANT_UID,
                PAY_METHOD,
                PG_ID,
                PG_PROVIDER,
                PG_TID,
                RECEIPT_URL,
                STATUS,
                STARTED_AT,
                USER_AGENT,
                VBANK_CODE,
                VBANK_DATE,
                VBANK_HOLDER,
                VBANK_ISSUED_AT,
                VBANK_NAME,
                VBANK_NUM,
                ORDER_PK
            )
    VALUES
        (
            #{orderDetail.amount},
            #{orderDetail.apply_num},
            #{orderDetail.bank_code},
            #{orderDetail.bank_name},
            #{orderDetail.buyer_addr},
            #{orderDetail.buyer_email},
            #{orderDetail.buyer_tel},
            #{orderDetail.cancel_amount},
            #{orderDetail.cancel_reason},
            #{orderDetail.card_code},
            #{orderDetail.card_name},
            #{orderDetail.card_number},
            #{orderDetail.card_quota},
            #{orderDetail.cash_receipt_issued},
            #{orderDetail.card_type},
            #{orderDetail.currency},
            #{orderDetail.custom_data},
            #{orderDetail.customer_uid},
            #{orderDetail.escrow},
            #{orderDetail.fail_reason},
            #{orderDetail.imp_uid},
            #{orderDetail.merchant_uid},
            #{orderDetail.pay_method},
            #{orderDetail.pg_id},
            #{orderDetail.pg_provider},
            #{orderDetail.pg_tid},
            #{orderDetail.receipt_url},
            #{orderDetail.status},
            #{orderDetail.started_at},
            #{orderDetail.user_agent},
            #{orderDetail.vbank_code},
            #{orderDetail.vbank_date},
            #{orderDetail.vbank_holder},
            #{orderDetail.vbank_issued_at},
            #{orderDetail.vbank_name},
            #{orderDetail.vbank_num},
            #{order_pk}
        )
</insert>
<!--결제 시 주문상품-->
<insert id="HAX.V1.INSERT.009">
    INSERT INTO
        TB_ORDERPRODUCT
            (
                PRODUCT_PK,
                DISCOUNT_PRICE,
                TOTAL_PRICE,
                EACH_SOLD,
                BOX_SOLD,
                CARTON_SOLD,
                EVENT_EACH_STOCK,
                EVENT_BOX_STOCK,
                EVENT_CARTON_STOCK,
                EVENT_LIMIT_PRICE,
                ORDER_PK,
                PRODUCT_INFO
            )
    VALUES
        <foreach collection="orderProduct" item="items" separator=",">
        (
            #{items.product_pk},
            #{items.eventTotalPrice},
            #{items.totalPrice},
            #{items.eachSoldCount},
            #{items.boxSoldCount},
            #{items.cartonSoldCount},
            #{items.eachEventStock},
            #{items.boxEventStock},
            #{items.cartonEventStock},
            #{items.eventLimitAmount},
            #{order_pk},
            #{items}
        )
        </foreach>
</insert>
<!--결제 시 히스토리-->
<insert id="HAX.V1.INSERT.010">
    INSERT INTO
        TB_ORDERHISTORY
            (
                ORDER_PK,
                COMMENT,
                HISTORY_TYPE
            )
    VALUES
        (
            #{order_pk},
            #{comment},
            #{history_type}
        )
</insert>
<!--장바구니 다시 담기-->
<insert id="HAX.V1.INSERT.011">
    INSERT INTO
        TB_CART
            (
            PRODUCT_PK,
            MEMBER_PK,
            UNIT_TYPE,
            QUANTITY
            )
    VALUES
        <foreach collection="cart_array" item="items" separator=",">
            (
            #{items.product_pk},
            #{items.member_pk},
            #{items.unit_type},
            #{items.quantity}
            )
        </foreach>
    ON
    CONFLICT (PRODUCT_PK, UNIT_TYPE, MEMBER_PK) DO
    UPDATE
    SET
        PRODUCT_PK = TB_CART.PRODUCT_PK,
        UNIT_TYPE = TB_CART.UNIT_TYPE,
        MEMBER_PK = TB_CART.MEMBER_PK,
        QUANTITY = EXCLUDED.QUANTITY
</insert>
<!--이미지 테스트-->
<insert id="HAX.V1.INSERT.099">
    INSERT INTO
        TB_TEST
        (IMG_URL)
    VALUES
        (#{insert_img})
    RETURNING
        IMG_URL
</insert>
<!--DELETE-->
<!--장바구니 삭제(개별)-->
<delete id="HAX.V1.DELETE.001">
    DELETE
    FROM
        TB_CART
    WHERE
        CART_PK = #{cart_pk}
    RETURNING
        CART_PK
</delete>
<!--장바구니 삭제(배열)-->
<delete id="HAX.V1.DELETE.002">
    <foreach collection="data_array" item="items" separator=";">
    DELETE
    FROM
        TB_CART
    WHERE
        MEMBER_PK = #{member_pk}
        AND PRODUCT_PK = #{items.product_pk}
    RETURNING
        CART_PK
    </foreach>
</delete>
<!--장바구니 삭제(담기)-->
<delete id="HAX.V1.DELETE.003">
    DELETE
    FROM
        TB_CART
    WHERE
        MEMBER_PK = #{member_pk}
        AND PRODUCT_PK = #{product_pk}
</delete>
<!--결제 후 장바구니 비우기-->
<delete id="HAX.V1.DELETE.004">
    DELETE
    FROM
        TB_CART
    WHERE
        MEMBER_PK = #{memberIdx}
        AND CART_PK IN (${cart_array})
    RETURNING
        CART_PK
</delete>
</mapper>